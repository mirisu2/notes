wget http://www.haproxy.org/download/2.3/src/haproxy-2.3.4.tar.gz
tar -xzf haproxy-2.3.4.tar.gz
cd haproxy-2.3.4
less INSTALL
yum install -y git ca-certificates gcc libc6-dev liblua5.3-dev libpcre3-dev libssl-dev libsystemd-dev make wget zlib1g-dev
openssl-devel readline-devel systemd-devel make pcre-devel liblua5.1-0-dev
make clean 




# https://www.haproxy.com/documentation/hapee/latest/onepage/intro/#1
# vi /usr/lib/systemd/system/haproxy.service
global
    maxconn 50000
    log /dev/log local0
    user haproxy
    group haproxy


defaults
    # HAProxy will wait for a TCP connection to a backend server to be established
    timeout connect 10s
    # setting measures inactivity during periods that we would expect the client to be speaking
    timeout client 30s
    # setting measures inactivity when we’d expect the backend server to be speaking. When a timeout expires, the connection is closed
    timeout server 30s
    # way of telling each subsequent frontend to use the log setting that you defined in the global section.
    log global
    # it makes sense to specify it in the defaults section to avoid repetition.
    mode http
    # You will generally prefer option httplog over option tcplog in your defaults section because when HAProxy encounters a 
    # frontend that uses mode tcp, it will emit a warning and downgrade it to option tcplog anyway.
    option httplog|tcplog
    # setting limits the number of connection that each frontend will accept
    maxconn 3000


#---------------------------------------------------------------------
# kube-apiserver :6443
#---------------------------------------------------------------------

frontend apiserver
    option tcplog
    mode tcp
    bind *:6443
    default_backend kube_apiserver_6443
    
backend kube_apiserver_6443
    mode tcp
    balance roundrobin
    server controller-1 172.16.16.161:6443
    server controller-2 172.16.16.162:6443
    server controller-3 172.16.16.163:6443
    
# Each frontend keyword is followed by a label, such as www.mysite.com, to differentiate it from others. 
frontend www.mysite.com
    # The IP can be omitted to bind to all IP addresses on the server and a port can be a single port, a range, or a comma-delimited list.
    bind 10.0.0.3:80
    bind 10.0.0.3:443 ssl crt /etc/ssl/certs/mysite.pem
    #  clients that request your website over non-encrypted HTTP are redirected to the HTTPS version of the site.
    http-request redirect scheme https unless { ssl_fc }
    # https://www.haproxy.com/blog/introduction-to-haproxy-acls/
    use_backend api_servers if { path_beg /api/ }
    
    # The default_backend setting is found in nearly every frontend and gives the name of a backend to send traffic to if a use_backend rule doesn’t send it elsewhere first. 
    # If a request isn’t routed by a use_backend or default_backend directive, HAProxy will return a 503 Service Unavailable error.
    default_backend web_servers


backend web_servers
    balance roundrobin
    cookie SERVERUSED insert indirect nocache
    option httpchk HEAD /
    default-server check maxconn 20
    server server1 10.0.1.3:80 cookie server1
    server server2 10.0.1.4:80 cookie server2
