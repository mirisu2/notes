# https://nginx.org/ru/docs/ngx_core_module.html
# https://nginx.org/ru/docs/beginners_guide.html


stop — быстрое завершение
quit — плавное завершение
reload — перезагрузка конфигурационного файла
reopen — переоткрытие лог-файлов
nginx -s reload


# Контекст:	main
daemon on | off;
user пользователь [группа];
worker_processes число | auto;
# привязывает каждый рабочий процесс к отдельному процессору. В доке больше информации!
worker_cpu_affinity auto;

worker_priority число;
worker_priority 0; # -20...20

# Изменяет ограничение на максимальное число открытых файлов (RLIMIT_NOFILE) для рабочих процессов. Используется для увеличения ограничения без перезапуска главного процесса.
worker_rlimit_nofile число;

# Контекст:	main, http, mail, stream, server, location
# debug, info, notice, warn, error, crit, alert, emerg
# https://nginx.org/ru/docs/syslog.html
# Для работы уровня лога debug необходимо сконфигурировать nginx с --with-debug, см. “Отладочный лог”.
error_log файл [уровень];
error_log /var/log/nginx-error.log info;

include файл | маска;
include mime.types;
include vhosts/*.conf;

load_module файл;
load_module modules/ngx_mail_module.so;

# Задаёт файл, в котором будет храниться номер (PID) главного процесса.
pid файл;
pid logs/nginx.pid;

# Предоставляет контекст конфигурационного файла, в котором указываются директивы, влияющие на обработку соединений
# Контекст:	main
events {
    # Контекст:	events
    # Обычно нет необходимости задавать его явно, поскольку по умолчанию nginx сам выбирает наиболее эффективный метод.
    use метод;
  
    # Задаёт максимальное число соединений, которые одновременно может открыть рабочий процесс.
    # Контекст:	events
    worker_connections 2048;
  
    # Включает отладочный лог для отдельных клиентских соединений. Для остальных соединений используется уровень лога, заданный директивой error_log. 
    # Для работы директивы необходимо сконфигурировать nginx с параметром --with-debug, см. “Отладочный лог”.
    debug_connection адрес | CIDR | unix:;
    debug_connection 127.0.0.1;
    debug_connection localhost;
    debug_connection 192.0.2.0/24;
    debug_connection ::1;
    debug_connection 2001:0db8::/32;
    debug_connection unix:;
}

http {
  server {
      listen      192.168.1.1:80;
      server_name example.org www.example.org;
      ...
  }

  server {
      listen      192.168.1.1:80 default_server;
      server_name example.net www.example.net;
      ...
  }

  server {
      listen      192.168.1.2:80 default_server;
      server_name example.com www.example.com;
      ...
  }

  server {
      listen      80;
      # Если запросы без поля “Host” в заголовке не должны обрабатываться, можно определить сервер, который будет их отклонять
      server_name "";
      return      444;
  }
  
  server {
    listen      80;
    server_name example.org www.example.org;
  }
  
  server {
    listen      80 default_server;
    server_name example.net www.example.net;
    
    location / {
        root /data/www;
    }
    
    location /images/ {
        root /data;
    }
  }
  
}

stream {
  log_format basic '$proxy_protocol_addr - $remote_addr [$time_local] '
				   '$protocol $status $bytes_sent $bytes_received '
				   '$session_time';
				   
  access_log /var/log/nginx/access_log basic;
  server {
	listen 587 proxy_protocol;
	proxy_protocol on;
	proxy_pass stream_backend;
	set_real_ip_from 100.65.0.0/16;
  }
  upstream stream_backend {
	server 192.168.2.56:32430;
	server 192.168.2.57:32430;
	server 192.168.2.58:32430;
	server 192.168.2.59:32430;
  }
}


# https://nginx.org/ru/docs/beginners_guide.html
# сервер, который будет перенаправлять все запросы, кроме запросов статических изображений, на проксируемый сервер, 
# работающий по адресу localhost:9000, по протоколу FastCGI.
server {
    location / {
        fastcgi_pass  localhost:9000;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param QUERY_STRING    $query_string;
    }

    location ~ \.(gif|jpg|png)$ {
        root /data/images;
    }
}
