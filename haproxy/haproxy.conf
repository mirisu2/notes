# Pre
sudo sysctl -a
/etc/sysctl.conf 
net.ipv4.ip_local_port_range = 1025 65535

sudo ps uax | grep haproxy
cat /proc/1154/limits

sudo haproxy -f configuration.conf -c

sudo yum install socat
echo "show info" | sudo socat stdio /run/haproxy-master.sock

#---------------------------------------------------------------------
# install
# vi /usr/lib/systemd/system/haproxy.service
#---------------------------------------------------------------------

[root@lb-2 ~]# haproxy -f /etc/haproxy/haproxy.cfg
-D : start as a daemon
-c : only performs a check of the configuration files and exits before trying
    to bind. The exit status is zero if everything is OK, or non-zero if an
    error is encountered.
-n <limit> : limits the per-process connection limit to <limit>. This is
    equivalent to the global section's keyword "maxconn".
-p /run/haproxy.pid : write all processes' pids into <file> during startup. This is
    equivalent to the "global" section's keyword "pidfile".
-sf $(cat /run/haproxy.pid)  : send the "finish" signal (SIGUSR1) to older processes after boot completion to ask them to finish what they are doing and to leave. 
-Ws : master-worker mode with support of `notify` type of systemd service.
    This option is only available when HAProxy was built with `USE_SYSTEMD`
    build option enabled.
-v : report the version and build date.
-vv : display the version, build options, libraries versions and usable
    pollers. 

HAProxy supports a graceful and a hard stop. 
HARD STOP is simple, when the SIGTERM (-15) signal is sent to the haproxy process, it immediately quits and all established connections are closed.
The GRACEFUL stop is triggered when the SIGUSR1 (-16) signal is sent to the haproxy process. It consists in only unbinding from listening ports, 
but continue to process existing connections until they close. Once the last connection is closed, the process leaves.

# The hard stop method is used for the "stop" or "restart" actions of the service
# management script. The graceful stop is used for the "reload" action which
# tries to seamlessly reload a new configuration in a new process.

# A regular Unix process is generally granted
# 1024 file descriptors by default, and a privileged process can raise this limit
# itself. This is one reason for starting HAProxy as root and letting it adjust
# the limit. The default limit of 1024 file descriptors roughly allow about 500
# concurrent connections to be processed. The computation is based on the global
# "maxconn" parameter which limits the total number of connections per process, the
# number of listeners, the number of servers which have a health check enabled,
# the agent checks, the peers, the loggers and possibly a few other technical
# requirements.

wget http://www.haproxy.org/download/2.3/src/haproxy-2.3.4.tar.gz
tar -xzf haproxy-2.3.4.tar.gz
cd haproxy-2.3.4
less INSTALL
yum install -y git ca-certificates gcc libc6-dev liblua5.3-dev libpcre3-dev libssl-dev libsystemd-dev make wget zlib1g-dev
openssl-devel readline-devel systemd-devel make pcre-devel liblua5.1-0-dev
make clean 


#---------------------------------------------------------------------
# /etc/haproxy/haproxy.conf
# https://www.freecodecamp.org/news/how-we-fine-tuned-haproxy-to-achieve-2-000-000-concurrent-ssl-connections-d017e61a4d27/
# https://www.haproxy.com/blog/the-four-essential-sections-of-an-haproxy-configuration/
# https://www.haproxy.com/documentation/hapee/latest/onepage/management/
# https://www.haproxy.com/blog/category/load-balancing-routing/
# https://www.haproxy.com/blog/introduction-to-haproxy-acls/
#---------------------------------------------------------------------

global
    nbproc 4
    cpu-map 1 0
    cpu-map 2 1
    cpu-map 3 2
    cpu-map 4 3
    stats bind-process 4
    # Since version 1.8 HAproxy is fully multi-threaded. To enable multithreaded mode just add:
    nbthread 4
    maxconn 50000
    log /dev/log local0 warning
    user haproxy
    group haproxy
    daemon


defaults
    # HAProxy will wait for a TCP connection to a backend server to be established
    timeout connect 10s
    # setting measures inactivity during periods that we would expect the client to be speaking
    timeout client 30s
    # setting measures inactivity when we’d expect the backend server to be speaking. When a timeout expires, the connection is closed
    timeout server 30s
    # way of telling each subsequent frontend to use the log setting that you defined in the global section.
    log global
    # it makes sense to specify it in the defaults section to avoid repetition.
    mode http
    # You will generally prefer option httplog over option tcplog in your defaults section because when HAProxy encounters a 
    # frontend that uses mode tcp, it will emit a warning and downgrade it to option tcplog anyway.
    option httplog | tcplog
    # setting limits the number of connection that each frontend will accept
    maxconn 3000


#---------------------------------------------------------------------
# kube-apiserver :6443
#---------------------------------------------------------------------

frontend apiserver
    option tcplog
    mode tcp
    bind *:6443
    default_backend kube_apiserver_6443
    
backend kube_apiserver_6443
    mode tcp
    balance roundrobin
    server controller-1 172.16.16.161:6443
    server controller-2 172.16.16.162:6443
    server controller-3 172.16.16.163:6443
    
# Each frontend keyword is followed by a label, such as www.mysite.com, to differentiate it from others. 
frontend www.mysite.com
    # The IP can be omitted to bind to all IP addresses on the server and a port can be a single port, a range, or a comma-delimited list.
    bind 10.0.0.3:80
    bind 10.0.0.3:443 ssl crt /etc/ssl/certs/mysite.pem
    #  clients that request your website over non-encrypted HTTP are redirected to the HTTPS version of the site.
    http-request redirect scheme https unless { ssl_fc }
    # https://www.haproxy.com/blog/introduction-to-haproxy-acls/
    use_backend api_servers if { path_beg /api/ }
    
    # The default_backend setting is found in nearly every frontend and gives the name of a backend to send traffic to if a use_backend rule doesn’t send it elsewhere first. 
    # If a request isn’t routed by a use_backend or default_backend directive, HAProxy will return a 503 Service Unavailable error.
    default_backend web_servers


backend web_servers
    # May be used in sections: defaults | listen | backend
    balance roundrobin | leastconn
    # It tells HAProxy to send a cookie named SERVERUSED to the client, and to associate it with the name of the server that gave the initial response.
    cookie SERVERUSED insert indirect nocache
    
    # https://www.haproxy.com/documentation/hapee/latest/onepage/#option%20httpchk
    # https://www.haproxy.com/documentation/hapee/latest/onepage/#option%20tcp-check
    option httpchk | tcp-check
    
    # The default-server setting configures defaults for any server lines that follow, such as enabling health checks, max connections, etc. 
    # This can make your configuration easier to read and modify. Alternatively, you can specify these arguments on each server.
    default-server check maxconn 20
    
    # You can specify a domain name instead of an IP address. In that case, it will be resolved at startup or, if you add a 'resolvers' argument, 
    # it will be updated during runtime. If the DNS entry contains an SRV record, the port and weight will be filled in from it too. If the port isn’t specified, 
    # then HAProxy will use the same port that the client connected on, which is useful for randomly used ports such as for active-mode FTP.
    
    server s1 app1.domain.com:80 check resolvers mydns
    server server1 10.0.1.3:80 cookie server1
    server server2 10.0.1.4:80 cookie server2

# https://www.haproxy.com/documentation/hapee/latest/onepage/#5.3.2-resolvers
resolvers mydns
  nameserver dns1 10.0.0.1:53
  nameserver dns2 10.0.0.2:53
  parse-resolv-conf
  resolve_retries       3
  timeout resolve       1s
  timeout retry         1s
  hold other           30s
  hold refused         30s
  hold nx              30s
  hold timeout         30s
  hold valid           10s
  hold obsolete        30s


# combine the functionality of a frontend and backend into one.
listen stats
  bind *:8404
  stats enable
  stats uri /monitor
  stats refresh 5s
